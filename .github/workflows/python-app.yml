# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: FastAPI CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false       # continue all matrix jobs even if one fails
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 mypy black isort uvicorn fastapi aiosqlite
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type‑check with mypy
        run: |
          mypy .

      - name: Create environment file
        run: |
          cat <<EOF > .env
          # Keycloak configuration
          KEYCLOAK_SERVER_URL=${{ secrets.KEYCLOAK_SERVER_URL }}
          KEYCLOAK_REALM=${{ secrets.KEYCLOAK_REALM }}
          KEYCLOAK_CLIENT_ID=${{ secrets.KEYCLOAK_CLIENT_ID }}
          KEYCLOAK_CLIENT_SECRET=${{ secrets.KEYCLOAK_CLIENT_SECRET }}

          # BBB API configuration
          BBB_SERVER_BASE_URL=${{ secrets.BBB_SERVER_BASE_URL }}
          BBB_SECRET=${{ secrets.BBB_SECRET }}
          PLUGIN_MANIFESTS_URL=${{ secrets.PLUGIN_MANIFESTS_URL }}

          # Broadcaster configuration
          BROADCASTER_API_URL=${{ secrets.BROADCASTER_API_URL }}

          # Twitch configuration
          TWITCH_SERVER=irc.chat.twitch.tv
          TWITCH_PORT=6697
          TWITCH_NICK=${{ secrets.TWITCH_NICK }}
          TWITCH_TOKEN=${{ secrets.TWITCH_TOKEN }}
          TWITCH_CHANNEL=${{ secrets.TWITCH_CHANNEL }}

          # Database configuration
          DB_URL=sqlite+aiosqlite:///./test.db

          # Environment
          ENV=development
          EOF
          echo "Environment file created."

      - name: Setup mock modules
        run: |
          # Create directories for mocks and testing tools
          mkdir -p tests/mocks
          mkdir -p tests/tools
          
          # Copy mock modules
          cp $GITHUB_WORKSPACE/.github/mocks/mock_keycloak.py tests/mocks/
          cp $GITHUB_WORKSPACE/.github/tools/patch_imports.py tests/tools/
          
          # Add tests directory to Python path
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          
          # Print the patching script for debugging
          echo "--- patch_imports.py content ---"
          cat tests/tools/patch_imports.py
          echo "--------------------------------"
          
          # Run the patch script to modify the app files for testing
          python tests/tools/patch_imports.py app --verbose
          
          # Verify a few key files were patched correctly
          echo "--- Checking some patched files ---"
          grep -n "mock_keycloak" app/config/settings.py || echo "No match in settings.py"
          grep -n "mock_keycloak" app/services/auth_service.py || echo "No match in auth_service.py"
          echo "--------------------------------"

      - name: Start FastAPI and verify it's running
        run: |
          # Load environment variables
          source .env
          
          # Add tests directory to PYTHONPATH
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          
          # Verify Python path and imports
          echo "Python path: $PYTHONPATH"
          echo "Checking import paths:"
          python -c "import sys; print(sys.path)"
          echo "Checking mock module:"
          python -c "import tests.mocks.mock_keycloak; print('Mock module found')" || echo "Failed to import mock"
          
          # Start server in background and capture process ID
          python -m uvicorn app.main:app \
            --host 127.0.0.1 \
            --port 8000 \
            --lifespan off \
            --log-level debug \
            --workers 1 \
            --timeout-keep-alive 1 \
            --no-access-log &> server.log &
          SERVER_PID=$!
          
          echo "Server started with PID $SERVER_PID"
          
          # Give the server time to start
          echo "Waiting for server to start..."
          sleep 5
          
          # Function to check server health
          check_server() {
            curl -sSf http://127.0.0.1:8000/health 2>/dev/null || curl -sSf http://127.0.0.1:8000/ 2>/dev/null || curl -sSf http://127.0.0.1:8000/docs 2>/dev/null
            return $?
          }
          
          # Try several times to connect to the server
          MAX_ATTEMPTS=10
          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "Checking server connection (attempt $i/$MAX_ATTEMPTS)..."
            if check_server; then
              echo "✅ Server is responsive!"
              
              # Run simple endpoint tests
              echo "Testing API documentation endpoints..."
              curl -sSf http://127.0.0.1:8000/docs > /dev/null && echo "✅ /docs endpoint works"
              curl -sSf http://127.0.0.1:8000/redoc > /dev/null && echo "✅ /redoc endpoint works"
              
              # Clean up server process
              kill $SERVER_PID 2>/dev/null || true
              wait $SERVER_PID 2>/dev/null || true
              exit 0
            fi
            sleep 2
          done
          
          # If we get here, server is not responding
          echo "::error::Server failed to respond after $MAX_ATTEMPTS attempts"
          echo "Server logs:"
          cat server.log
          ps -ef | grep python
          kill $SERVER_PID 2>/dev/null || true
          exit 1
